# MyPadelLeague - Technical Documentation

## 1. System Overview
MyPadelLeague is a Flask-based web application designed to manage padel sports leagues. It provides functionality for creating and managing clubs, leagues, gamedays, and user accounts.

## 2. Technology Stack
- Backend: Python Flask
- Database: SQLite with SQLAlchemy ORM
- Frontend: HTML, CSS, JavaScript
- Authentication: Flask-Login
- Database Migrations: Alembic

## 3. Database Schema

### 3.1 Core Tables
#### Users (tb_users)
- Primary key: us_id
- Fields:
  - us_name: String(50), user's full name
  - us_email: String(200), unique email
  - us_pwd: String(150), hashed password
  - us_birthday: Date
  - us_is_player: Boolean
  - us_is_manager: Boolean
  - us_is_admin: Boolean
  - us_is_superuser: Boolean
  - us_is_active: Boolean

#### Club (tb_club)
- Primary key: cl_id
- Fields:
  - cl_name: String(100)
  - cl_email: String(200)
  - cl_phone: String(20)
  - cl_address: String(200)
  - cl_active: Boolean
- Relationships:
  - courts: One-to-Many with Court
  - leagues: One-to-Many with League

#### League (tb_league)
- Primary key: lg_id
- Fields:
  - lg_club_id: ForeignKey to Club
  - lg_name: String(50)
  - lg_level: String(20)
  - lg_status: String(20)
  - lg_nbrDays: Integer
  - lg_nbrTeams: Integer
  - lg_startDate: Date
  - lg_endDate: Date
  - lg_startTime: Time
  - lg_minWarmUp: Integer
  - lg_minPerGame: Integer
  - lg_minBetweenGames: Integer
  - lg_typeOfLeague: String(50)
  - tb_maxLevel: Integer
  - lg_eloK: Integer

#### GameDay (tb_gameday)
- Primary key: gd_id
- Fields:
  - gd_idLeague: ForeignKey to League
  - gd_date: Date
  - gd_status: String(20)
  - gd_idWinner1: ForeignKey to Users
  - gd_idWinner2: ForeignKey to Users
  - gd_gameDayName: String(50)

#### Game (tb_game)
- Primary key: gm_id
- Fields:
  - gm_idLeague: ForeignKey to League
  - gm_idGameDay: ForeignKey to GameDay
  - gm_date: Date
  - gm_timeStart: Time
  - gm_timeEnd: Time
  - gm_court: ForeignKey to Court
  - gm_idPlayer_A1/A2/B1/B2: ForeignKey to Users
  - gm_result_A/B: Integer
  - gm_teamA/B: String(1)

### 3.2 Relationship Tables
#### ClubAuthorization (tb_club_authorization)
- Links users to clubs they can manage
- Fields:
  - ca_user_id: ForeignKey to Users
  - ca_club_id: ForeignKey to Club
  - ca_created_at: DateTime

#### LeagueCourts (tb_league_courts)
- Links leagues to their available courts
- Fields:
  - lc_league_id: ForeignKey to League
  - lc_court_id: ForeignKey to Court

## 4. Key Features

### 4.1 User Management
- Registration and authentication system
- Role-based access control (Player, Manager, Admin, Superuser)
- User profile management

### 4.2 Club Management
- Create and edit clubs
- Manage club authorizations
- Upload club photos
- Track club facilities (courts)

### 4.3 League Management
#### League Creation Process
1. Basic Information (Step 1):
   - Select club
   - Set league name, level, status
   - Define number of teams and days
   - Set start date

2. Court Selection & Details (Step 2):
   - Select required courts
   - Set start time
   - Configure game parameters:
     - Warm-up duration
     - Game duration
     - Between-game intervals
   - Set league type and parameters
   - Upload league photo

#### Automated Game Scheduling
- Creates gamedays based on league duration
- Automatically generates games for each gameday
- Considers:
  - Available courts
  - Time constraints
  - Number of teams
  - Game duration parameters

### 4.4 GameDay Management
- Track game results
- Record winners
- Manage game status
- View detailed game schedules

## 5. File Structure
```
mypadeleague/
├── main.py                 # Application entry point
├── website/
│   ├── __init__.py        # Flask app initialization
│   ├── auth.py            # Authentication routes
│   ├── views.py           # Main application routes
│   ├── models.py          # Database models
│   ├── config.py          # Configuration settings
│   └── static/            # Static assets
│       ├── css/
│       ├── js/
│       └── images/
└── migrations/            # Database migrations
```

## 6. Security Features
- Password hashing using pbkdf2:sha256
- Login session management
- Authorization checks for all operations
- CSRF protection

## 7. Internationalization
- Supports multiple languages
- Translation system using JSON files
- Language selection persistence

## 8. Development Guidelines
### 8.1 Adding New Features
1. Create necessary database models in models.py
2. Add routes in views.py
3. Create templates in templates/
4. Add translations in translations.json

### 8.2 Database Changes
1. Create new migration using Flask-Migrate
2. Test migration up/down scripts
3. Apply migration to database

### 8.3 Best Practices
- Validate user permissions for all operations
- Use Flask-Login decorators for protected routes
- Implement proper error handling
- Follow established naming conventions

## 9. Configuration Details
### 9.1 Application Configuration
```python
class Config:
    TITLE = "My Padel League"
    FAVICON = "../static/images/favicon.ico"
    LOGOICON = "../static/images/logo-icon.png"
    DB_NAME = "myPadelLeague.db"
    SECRET_KEY = 'Hello From Hell! :D'
```

### 9.2 Database Configuration
The application uses SQLite as the database engine. The database file is stored in the 'instance' folder as 'myPadelLeague.db'.

### 9.3 Language Configuration
```python
LANGUAGES = {
    'en': 'English',
    'pt': 'Portuguese'
}
```

## 10. Core Functionality Implementation

### 10.1 League Creation Logic
```python
def create_league_gamedays(league_id, league_name, start_date, num_days):
    current_date = start_date
    for day_number in range(1, int(num_days) + 1):
        gameday = GameDay(
            gd_idLeague=league_id,
            gd_date=current_date,
            gd_status='pending',
            gd_gameDayName=f"{league_name} {day_number}"
        )
        db.session.add(gameday)
        current_date += timedelta(days=7)  # Weekly schedule
```

### 10.2 Game Scheduling Algorithm
The game scheduling system follows these rules:
1. Calculates required courts based on number of teams (num_teams / 2)
2. Validates court availability for the league
3. Creates game slots considering:
   - Warm-up time before first game
   - Game duration
   - Break time between games
4. Assigns courts for each game round
5. Automatically calculates end times for each game

### 10.3 Authorization System
- Club-level authorization through ClubAuthorization table
- Role-based access (Player, Manager, Admin, Superuser)
- Authorization checks on all protected routes
- Session management using Flask-Login

## 11. File Organization

### 11.1 Static Files
- css/: Contains all styling files including custom.css
- js/: Contains JavaScript files including custom.js for dynamic features
- images/: Stores application images and uploaded content
- flags/: Country flag images for language selection
- fonts/: Custom fonts and icon fonts

### 11.2 Templates
- base.html: Base template with common layout
- League management:
  - create_league.html
  - create_league_step2.html
  - edit_league.html
  - league_detail.html
- Game management:
  - gameday_detail.html
  - gameday_edit.html
- User management:
  - login.html
  - sign_up.html
  - user_info.html
  - user_own_info.html

## 12. Database Management

### 12.1 Migrations
Current migration version: 5055aa442094
Latest changes:
- Added address column to club table
- Added active status to club table
- Removed location column from club table

### 12.2 Relationships
The database uses several relationship types:
1. One-to-Many:
   - Club to Courts
   - Club to Leagues
   - League to GameDays
   - GameDay to Games
2. Many-to-Many:
   - Users to Clubs (through ClubAuthorization)
   - Leagues to Courts (through LeagueCourts)

## 13. Frontend Implementation

### 13.1 JavaScript Features
- Dynamic court selection
- Form validation
- Auto-complete user search
- Real-time updates for game scores
- Responsive UI components

### 13.2 CSS Framework
- Bootstrap-based responsive design
- Custom CSS for specialized components
- Icon integration (Font Awesome, Material Design)
- Mobile-friendly layouts

## 14. Error Handling

### 14.1 User Input Validation
- Client-side validation using JavaScript
- Server-side validation in Flask routes
- Form data sanitization
- Error message localization

### 14.2 Database Error Handling
- Transaction management
- Constraint violation handling
- Rollback on failure
- Error logging

## 15. Performance Considerations

### 15.1 Database Optimization
- Proper indexing on foreign keys
- Efficient query design
- Lazy loading of relationships
- Pagination for large datasets

### 15.2 Asset Management
- Static file caching
- Image optimization
- Efficient resource loading
- CDN-ready structure

## 16. Deployment

### 16.1 Prerequisites
- Python 3.x
- pip package manager
- SQLite3
- Virtual environment (recommended)

### 16.2 Installation Steps
1. Clone the repository
2. Create and activate virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\Scripts\activate     # Windows
   ```
3. Install dependencies:
   ```bash
   pip install flask flask-sqlalchemy flask-login flask-migrate werkzeug
   ```
4. Initialize database:
   ```bash
   flask db upgrade
   ```

### 16.3 Environment Setup
Required environment variables:
- FLASK_APP=main.py
- FLASK_ENV=development/production
- SECRET_KEY (for production)

### 16.4 Production Deployment
Recommended production setup:
- Use a production WSGI server (Gunicorn/uWSGI)
- Configure SSL/TLS
- Set up proper logging
- Use environment-specific configurations

## 17. Testing

### 17.1 Test Structure
```
tests/
├── unit/
│   ├── test_models.py
│   ├── test_auth.py
│   └── test_views.py
├── integration/
│   ├── test_database.py
│   └── test_api.py
└── conftest.py
```

### 17.2 Test Coverage
Key areas to test:
- User authentication and authorization
- League creation and management
- Game scheduling algorithm
- Data validation and error handling
- API endpoints
- Database operations

### 17.3 Testing Guidelines
1. Unit Tests:
   - Test model validation
   - Test route authorization
   - Test helper functions
   - Test form validation

2. Integration Tests:
   - Test database transactions
   - Test user workflows
   - Test file uploads
   - Test scheduling system

3. Performance Tests:
   - Test database query performance
   - Test concurrent user access
   - Test file upload handling
   - Test game scheduling with large datasets

## 18. Maintenance

### 18.1 Backup Procedures
1. Database Backup:
   - Daily automated backups
   - Backup before migrations
   - Store backups securely off-site

2. File Backup:
   - Regular backup of uploaded files
   - Version control for code
   - Configuration backup

### 18.2 Monitoring
Key metrics to monitor:
- Server resource usage
- Database performance
- Error rates
- User activity
- File storage usage

### 18.3 Update Procedures
1. Code Updates:
   - Test in development environment
   - Create database backup
   - Apply migrations
   - Deploy changes
   - Verify functionality

2. Database Updates:
   - Plan migrations carefully
   - Test migration scripts
   - Backup before applying
   - Have rollback plan

## 19. API Documentation

### 19.1 Authentication Endpoints
- POST /login
- POST /sign-up
- GET /logout

### 19.2 League Management Endpoints
- GET /managementLeagues
- POST /create_league
- GET/POST /edit_league/<league_id>
- POST /complete_league_creation/<league_id>

### 19.3 Game Management Endpoints
- GET /gameday_detail/<gameday_id>
- GET/POST /edit_gameday/<gameday_id>
- GET /create_gameday_games/<league_id>/<gameday_id>

### 19.4 Club Management Endpoints
- GET/POST /create_club
- GET/POST /edit_club/<club_id>
- POST /club/<club_id>/users/add

## 20. Troubleshooting Guide

### 20.1 Common Issues
1. Database Connection Issues:
   - Check database file permissions
   - Verify connection string
   - Check SQLite version compatibility

2. File Upload Issues:
   - Verify directory permissions
   - Check file size limits
   - Verify supported file types

3. Game Scheduling Issues:
   - Verify court availability
   - Check time slot calculations
   - Validate team numbers

### 20.2 Error Resolution
1. Database Errors:
   - Check migration history
   - Verify data integrity
   - Review transaction logs

2. Authentication Errors:
   - Check session configuration
   - Verify user permissions
   - Review login procedures

3. Performance Issues:
   - Optimize database queries
   - Review caching strategy
   - Check server resources

# League Player Management Feature Documentation

## Overview
This document outlines the implementation plan for managing league players in the edit_league page, including registration, user creation, and player removal features.

## UI Components

### 1. League Players Accordion
- Location: In edit_league.html within a new section
- Default state:
  - Open if league.registration_end_utc > current time
  - Collapsed if registration period has ended
- Display capacity: Shows league.lg_max_players rows

### 2. Player List Table
- Columns:
  * Player Name
  * Contact Info (Email/Phone)
  * Registration Date
  * Action Buttons (Delete Registration)
- Features:
  * Sorting by name and registration date
  * Shows registered players in first rows
  * Empty rows have search functionality
  * Delete button triggers confirmation modal

### 3. Search Player Components
- For empty rows:
  * Search textbox with autocomplete
  * "Add Player" button
  * "Create New Player" button
- Search functionality:
  * Minimum 3 characters
  * Searches by name, email, and phone
  * Shows up to 10 matching results
  * Display format: "Name - Email/Phone"

### 4. New Player Modal
- Fields:
  * Name (required)
  * Telephone (required)
  * Email (optional)
  * Photo upload (optional)
- Validation:
  * Telephone must be unique
  * Email must be unique (if provided)
- User creation:
  * No password set (or generic password: "welcome2padel")
  * Auto-registers to league after creation

## Backend Components

### 1. Database Changes
No new tables required. Using existing:
- Users
- LeaguePlayers

### 2. New API Endpoints

#### a. Search Players
```
GET /api/search_players
Params: query (string, min 3 chars)
Returns: List of matching users (id, name, email, phone)
```

#### b. Register Player to League
```
POST /api/league/{league_id}/register_player
Body: {user_id: number}
Returns: Updated player list
```

#### c. Create and Register New Player
```
POST /api/league/{league_id}/create_and_register
Body: 
  - name (required)
  - telephone (required)
  - email (optional)
  - photo (optional)
Returns: Updated player list
```

#### d. Remove Player Registration
```
DELETE /api/league/{league_id}/player/{player_id}
Returns: Success status
```

### 3. JavaScript Implementation

#### Main Components:
1. LeaguePlayerManager class
   - Handles all AJAX requests
   - Manages table updates
   - Controls modal state

2. Event Handlers:
   - Search input (debounced)
   - Add player button
   - Create player button
   - Delete registration button

3. DOM Updates:
   - updatePlayerTable()
   - refreshEmptyRows()
   - showSearchResults()
   - handleModalSubmit()

#### AJAX Implementation:
```javascript
class LeaguePlayerManager {
  constructor(leagueId) {
    this.leagueId = leagueId;
    this.searchTimeout = null;
  }

  async searchPlayers(query) {
    // Implementation
  }

  async registerPlayer(userId) {
    // Implementation
  }

  async createAndRegisterPlayer(playerData) {
    // Implementation
  }

  async removeRegistration(playerId) {
    // Implementation
  }
}
```

## Security Considerations

1. Authentication:
   - All endpoints require login
   - Verify user has league management rights

2. Validation:
   - Server-side validation of all inputs
   - Check league registration limits
   - Verify unique phone/email

3. Rate Limiting:
   - Implement for search endpoint
   - Limit registration attempts

## Error Handling

1. User Creation Errors:
   - Duplicate phone/email
   - Invalid data format
   - League full

2. UI Error Messages:
   - Toast notifications for success/error
   - Inline validation messages
   - Modal error states

## Implementation Steps

1. Backend Development:
   - Create new API endpoints
   - Implement validation logic
   - Add error handlers

2. Frontend Development:
   - Add accordion section to edit_league.html
   - Create player management table
   - Implement search functionality
   - Build new player modal
   - Add JavaScript handlers

3. Testing:
   - Unit tests for backend logic
   - Integration tests for API endpoints
   - UI testing for all interactions
   - Error handling verification

4. Deployment:
   - Database backup
   - Staged rollout
   - Monitor error rates

## User Flow

1. Normal Registration:
   a. Manager searches for player
   b. Selects from results
   c. Confirms registration
   d. Table updates automatically

2. New Player Creation:
   a. Manager clicks "Create New Player"
   b. Fills modal form
   c. System validates inputs
   d. Creates user and registers
   e. Table updates automatically

3. Remove Registration:
   a. Manager clicks delete button
   b. Confirms action
   c. System removes registration
   d. Table updates automatically

## Special Cases

1. Existing Phone Number:
   - Check if user has no password/generic password
   - If found, update user info instead of creating new
   - Register updated user to league
   - Show success message

2. League Full:
   - Disable add/create buttons
   - Show capacity message
   - Keep delete functionality

3. Registration Period:
   - Check dates before all operations
   - Disable modifications if ended
   - Show appropriate messages

## Maintenance Considerations

1. Database Indexes:
   - Add index on phone number
   - Add index on email
   - Optimize search queries

2. Monitoring:
   - Log all registration actions
   - Track search performance
   - Monitor error rates

3. Cleanup:
   - Remove temporary photos
   - Clean up failed registrations
   - Archive old data